{
  "openapi": "3.0.1",
  "info": {
    "title": "API2PDF - PDF Generation, Powered by Serverless",
    "description": "\n# Introduction\n  \n[Api2Pdf.com](https://www.api2pdf.com) is a powerful REST API for instantly generating PDF and Office documents from HTML, URLs, Microsoft Office Documents (Word, Excel, PPT), Email files, and images. You can generate image preview or thumbnail of a PDF, office document, or email file. The API also supports merge / concatenation of two or more PDFs, setting passwords on PDFs, and adding bookmarks to PDFs. Api2Pdf is a wrapper for popular libraries such as wkhtmltopdf, Headless Chrome, PdfSharp, and LibreOffice.\n\n# SDKs & Client Libraries\n  \n- Python [https://github.com/Api2Pdf/api2pdf.python](https://github.com/Api2Pdf/api2pdf.python)\n\n- Node [https://github.com/Api2Pdf/api2pdf.node](https://github.com/Api2Pdf/api2pdf.node)\n  \n- PHP [https://github.com/Api2Pdf/api2pdf.php](https://github.com/Api2Pdf/api2pdf.php)\n\n- C# [https://github.com/Api2Pdf/api2pdf.dotnet](https://github.com/Api2Pdf/api2pdf.dotnet)\n\n- Java [https://github.com/Api2Pdf/api2pdf.java](https://github.com/Api2Pdf/api2pdf.java)\n\n# Authorization\n  \nCreate an account at [portal.api2pdf.com](https://portal.api2pdf.com/register) to get an API key.\n\n**Two ways to authorize your API calls**\n\n- Query string parameter: apikey=YOUR-API-KEY\n\n- Request header: \n\n```\nAuthorization: YOUR-API-KEY\n```\n\n# Quickstart\n\nIf you are looking for just a quick call to grab PDFs of a URL, you can do a GET request like:\n\n```\nhttps://v2.api2pdf.com/chrome/pdf/url?url={UrlToConvert}&apikey={YourApiKey}\n```\n\nFor more advanced usage and settings, see the API specification below.",
    "version": "v2"
  },
  "paths": {
    "/chrome/pdf/url": {
      "get": {
        "tags": [
          "Chrome"
        ],
        "summary": "Convert URL to PDF",
        "description": "Convert a URL or Web Page to PDF using Headless Chrome. This GET request is for convenience and does not support advanced options. Use the POST request for more flexibility. \r\n      \r\n### Authorize via Query String Parameter\r\n\r\n**apikey=YOUR-API-KEY**\r\n\r\n### Example\r\n\r\n```\r\nhttps://v2.api2pdf.com/chrome/pdf/url?url={UrlToConvert}&apikey={YourApiKey}\r\n```",
        "operationId": "ChromeGetUrlToPdf",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Chrome"
        ],
        "summary": "Convert URL to PDF",
        "description": "A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\r\n\r\n- `url` *(string, required)* - Url to the web page to convert to PDF\r\n\r\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.\r\n\r\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\r\n\r\n- `options` *(object, optional)* - Include advanced Headless Chrome options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-headless-chrome/).\r\n\r\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\r\n\r\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a  method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.",
        "operationId": "ChromePostUrlToPdf",
        "parameters": [
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Chrome.Dtos.UrlToPdfRequestInputDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Chrome.Dtos.UrlToPdfRequestInputDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Chrome.Dtos.UrlToPdfRequestInputDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Chrome.Dtos.UrlToPdfRequestInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/chrome/pdf/html": {
      "post": {
        "tags": [
          "Chrome"
        ],
        "summary": "Convert raw HTML to PDF",
        "description": "A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\r\n\r\n- `html` *(string, required)* - raw HTML to convert to PDF\r\n\r\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to false.\r\n\r\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\r\n\r\n- `options` *(object, optional)* - Include advanced Headless Chrome options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-headless-chrome/).\r\n\r\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a  method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.",
        "operationId": "ChromePostHtmlToPdf",
        "parameters": [
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Chrome.Dtos.HtmlToPdfRequestInputDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Chrome.Dtos.HtmlToPdfRequestInputDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Chrome.Dtos.HtmlToPdfRequestInputDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Chrome.Dtos.HtmlToPdfRequestInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/chrome/image/url": {
      "get": {
        "tags": [
          "Chrome"
        ],
        "summary": "Convert URL to Image",
        "description": "Convert a URL or Web Page to Image using Headless Chrome. This GET request is for convenience and does not support advanced options. Use the POST request for more flexibility. \r\n      \r\n### Authorize via Query String Parameter\r\n\r\n**apikey=YOUR-API-KEY**\r\n\r\n### Example\r\n\r\n```\r\nhttps://v2.api2pdf.com/chrome/image/url?url={UrlToConvert}&apikey={YourApiKey}\r\n```",
        "operationId": "ChromeGetUrlToImage",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Chrome"
        ],
        "summary": "Convert URL to Image",
        "description": "A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\r\n\r\n- `url` *(string, required)* - Url to the web page to convert to PDF\r\n\r\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.\r\n\r\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\r\n\r\n- `options` *(object, optional)* - Include advanced Headless Chrome options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-headless-chrome/).\r\n\r\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\r\n\r\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a  method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.",
        "operationId": "ChromePostUrlToImage",
        "parameters": [
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Chrome.Dtos.UrlToImageRequestInputDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Chrome.Dtos.UrlToImageRequestInputDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Chrome.Dtos.UrlToImageRequestInputDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Chrome.Dtos.UrlToImageRequestInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/chrome/image/html": {
      "post": {
        "tags": [
          "Chrome"
        ],
        "summary": "Convert raw HTML to Image",
        "description": "A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\r\n\r\n- `html` *(string, required)* - raw HTML to convert to PDF\r\n\r\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to false.\r\n\r\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\r\n\r\n- `options` *(object, optional)* - Include advanced Headless Chrome options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-headless-chrome/).\r\n\r\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.",
        "operationId": "ChromePostHtmlToImage",
        "parameters": [
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Chrome.Dtos.HtmlToImageRequestInputDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Chrome.Dtos.HtmlToImageRequestInputDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Chrome.Dtos.HtmlToImageRequestInputDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Chrome.Dtos.HtmlToImageRequestInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/libreoffice/any-to-pdf": {
      "post": {
        "tags": [
          "LibreOffice"
        ],
        "summary": "Convert Office Document or Image File to PDF",
        "description": "A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\r\n\r\n- `url` *(string, required)* - Url to the file to convert to PDF\r\n\r\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.\r\n\r\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\r\n\r\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\r\n\r\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.",
        "operationId": "LibrePostAnyToPdf",
        "parameters": [
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/libreoffice/thumbnail": {
      "post": {
        "tags": [
          "LibreOffice"
        ],
        "summary": "Generate an image of the first page of a PDF or Office Document",
        "description": "A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\r\n\r\n- `url` *(string, required)* - Url to the file to convert to PDF\r\n\r\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.\r\n\r\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\r\n\r\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\r\n\r\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.",
        "operationId": "LibrePostThumbnail",
        "parameters": [
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/libreoffice/pdf-to-html": {
      "post": {
        "tags": [
          "LibreOffice"
        ],
        "summary": "Convert a PDF file to an HTML document",
        "description": "A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\r\n\r\n- `url` *(string, required)* - Url to the file to convert to PDF\r\n\r\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\r\n\r\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\r\n\r\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.",
        "operationId": "LibrePostPdfToHtml",
        "parameters": [
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/libreoffice/html-to-docx": {
      "post": {
        "tags": [
          "LibreOffice"
        ],
        "summary": "Generate a Microsoft Word file (.docx) from HTML",
        "description": "A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\r\n\r\n- `url` *(string, required)* - Url to the file to convert to PDF\r\n\r\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\r\n\r\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\r\n\r\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.",
        "operationId": "LibrePostHtmlToDocx",
        "parameters": [
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/libreoffice/html-to-xlsx": {
      "post": {
        "tags": [
          "LibreOffice"
        ],
        "summary": "Generate a Microsoft Excel document (.xlsx) from HTML",
        "description": "A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\r\n\r\n- `url` *(string, required)* - Url to the file to convert to PDF\r\n\r\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\r\n\r\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\r\n\r\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.",
        "operationId": "LibrePostHtmlToXlsx",
        "parameters": [
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/pdfsharp/merge": {
      "post": {
        "tags": [
          "PdfSharp"
        ],
        "summary": "Combine multiple PDF files into a single PDF file",
        "description": "A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\r\n\r\n- `urls` *(list of strings, required)* - List of urls to the PDFs to merge\r\n\r\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.\r\n\r\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\r\n\r\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\r\n\r\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.",
        "operationId": "PdfSharpPostMergePdfs",
        "parameters": [
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.MergePdfsRequestInputDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.MergePdfsRequestInputDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.MergePdfsRequestInputDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.MergePdfsRequestInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/pdfsharp/bookmarks": {
      "post": {
        "tags": [
          "PdfSharp"
        ],
        "summary": "Add bookmarks to an existing PDF",
        "description": "A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\r\n\r\n- `url` *(string, required)* - Url to the PDF\r\n\r\n- `bookmarks` *(array, required)* - Array of objects with title and page number attributes where page number is zero-indexed (0 is first page)\r\n\r\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.\r\n\r\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\r\n\r\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\r\n\r\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.",
        "operationId": "PdfSharpPostBookmarks",
        "parameters": [
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.BookmarksRequestInputDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.BookmarksRequestInputDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.BookmarksRequestInputDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.BookmarksRequestInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/pdfsharp/password": {
      "post": {
        "tags": [
          "PdfSharp"
        ],
        "summary": "Add a password to an existing PDF",
        "description": "A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\r\n\r\n- `url` *(string, required)* - Url to the PDF\r\n\r\n- `userpassword` *(string, required)* - User password to set to lock down pdf\r\n\r\n- `ownerpassword` *(string, optional)* - Owner password to set on pdf\r\n\r\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.\r\n\r\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\r\n\r\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\r\n\r\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.",
        "operationId": "PdfSharpPostPassword",
        "parameters": [
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.PasswordsRequestInputDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.PasswordsRequestInputDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.PasswordsRequestInputDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.PasswordsRequestInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/pdfsharp/extract-pages": {
      "post": {
        "tags": [
          "PdfSharp"
        ],
        "summary": "Extract pages out of a PDF",
        "description": "A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\r\n\r\n- `url` *(string, required)* - Url to the PDF\r\n\r\n- `start` *(integer, optional)* - Start the range of the PDF to extract, indexed to 0, defaults to the first page of the PDF. Can be negative, meaning -1 would start as the last page of the PDF\r\n\r\n- `end` *(integer, optional)* - End the range of the PDF to extract, indexed to 0, defaults to the last page of the PDF, can be negative.\r\n\r\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.\r\n\r\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\r\n\r\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\r\n\r\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.",
        "operationId": "PdfSharpPostExtractPages",
        "parameters": [
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.ExtractPagesRequestInputDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.ExtractPagesRequestInputDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.ExtractPagesRequestInputDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.ExtractPagesRequestInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/pdfsharp/compress": {
      "post": {
        "tags": [
          "PdfSharp"
        ],
        "summary": "Compress the file size of an existing PDF",
        "description": "A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\r\n\r\n- `url` *(string, required)* - Url to the PDF\r\n\r\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.\r\n\r\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\r\n\r\n- `extraHTTPHeaders` *(dict, optional)* - A key-value object for specifying headers in a request to the URL.\r\n\r\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.",
        "operationId": "PdfSharpPostCompress",
        "parameters": [
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.CompressRequestInputDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.CompressRequestInputDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.CompressRequestInputDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.CompressRequestInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/status": {
      "get": {
        "tags": [
          "Utils"
        ],
        "summary": "Health check for the API",
        "operationId": "UtilsStatusCheck",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/file/{responseid}": {
      "delete": {
        "tags": [
          "Utils"
        ],
        "summary": "Delete a file on command",
        "description": "Delete a file on command instead of waiting 24 hours for self-delete. Make a DELETE call to /file/{responseId} where {responseId} is from the JSON object returned from the original call to generate the file.\r\n      \r\n### Authorize via Header of Request\r\n\r\n**Authorization: YOUR-API-KEY**",
        "operationId": "UtilsFileDelete",
        "parameters": [
          {
            "name": "responseid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The response ID from the original file generation request"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/balance": {
      "get": {
        "tags": [
          "Utils"
        ],
        "summary": "Check remaining credit balance on your account",
        "operationId": "UtilsBalanceCheck",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/wkhtml/pdf/url": {
      "get": {
        "tags": [
          "Wkhtml"
        ],
        "summary": "Convert URL to PDF. Recommended to use Chrome endpoints instead.",
        "description": "Convert a URL or Web Page to PDF using wkhtmltopdf. This GET request is for convenience and does not support advanced options. Use the POST request for more flexibility.",
        "operationId": "WkthmlGetUrlToPdf",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Wkhtml"
        ],
        "summary": "Convert URL to PDF. Recommended to use Chrome endpoints instead.",
        "description": "A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\r\n\r\n- `url` *(string, required)* - Url to the web page to convert to PDF\r\n\r\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to true.\r\n\r\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\r\n\r\n- `options` *(object, optional)* - Include advanced Wkhtmltopdf options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-wkhtmltopdf/).\r\n\r\n- `enableToc` *(boolean, optional)* - Enable table of contents on your pdf by setting enableToc to true.\r\n\r\n- `tocOptions` *(object, optional)* - set enableToc to true and then configure your ToC options add a Table of Contents to the top of your PDF automatically.\r\n\r\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.",
        "operationId": "WkhtmlPostUrlToPdf",
        "parameters": [
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Wkhtml.Dtos.UrlToPdfRequestInputDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Wkhtml.Dtos.UrlToPdfRequestInputDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Wkhtml.Dtos.UrlToPdfRequestInputDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Wkhtml.Dtos.UrlToPdfRequestInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/wkhtml/pdf/html": {
      "post": {
        "tags": [
          "Wkhtml"
        ],
        "summary": "Convert raw HTML to PDF. Recommended to use Chrome endpoints instead.",
        "description": "A JSON object as a payload is required within the body of the request. The following attributes of the JSON object are detailed below:\r\n\r\n- `html` *(string, required)* - raw HTML to convert to PDF\r\n\r\n- `inline` *(boolean, optional)* - Open the PDF in a browser window. Default to false.\r\n\r\n- `fileName` *(string, optional)* - Specify a file name for the output PDF. Random name if not specified.\r\n\r\n- `options` *(object, optional)* - Include advanced wkhtmltopdf options like margins, headers, and footers. [See full list of advanced options here](https://www.api2pdf.com/documentation/advanced-options-wkhtmltopdf/).\r\n\r\n- `enableToc` *(boolean, optional)* - Enable table of contents on your pdf by setting enableToc to true.\r\n\r\n- `tocOptions` *(object, optional)* - set enableToc to true and then configure your ToC options add a Table of Contents to the top of your PDF automatically.\r\n\r\n- `storage` *(object, optional)* - set useCustomStorage to true and then provide a  method and url, typically a PUT and an amazon presigned s3 url if you want to store the files on your own servers. Must set useCustomStorage to true or it will default API2PDF servers.",
        "operationId": "WkhtmlPostHtmlToPdf",
        "parameters": [
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Wkhtml.Dtos.HtmlToPdfRequestInputDto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Wkhtml.Dtos.HtmlToPdfRequestInputDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Wkhtml.Dtos.HtmlToPdfRequestInputDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Services.Wkhtml.Dtos.HtmlToPdfRequestInputDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/zebra": {
      "get": {
        "tags": [
          "Zebra"
        ],
        "summary": "Generate bar codes and QR codes with ZXING.",
        "description": "`format` is most common CODE_39 or QR_CODE. See full list of options and documentation [here](https://www.api2pdf.com/documentation/advanced-options-zxing-zebra-crossing-barcodes/). Will default to image output, but can specify outputBinary=true to get a standard JSON response.",
        "operationId": "ZebraGetBarcode",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "width",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "showlabel",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/zip": {
      "post": {
        "tags": [
          "Zip"
        ],
        "summary": "Create a .zip file from multiple files",
        "description": "Pass in a list of urls to existing files along with desired file names and paths to subdirectories. This method will ingest those files and create a .zip and return the .zip in binary form in the response by default but you can specify outputBinary=false to get a standard JSON response. Be mindful of memory limits of the API.",
        "operationId": "ZipPostGenerateZip",
        "parameters": [
          {
            "name": "outputBinary",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Controllers.ZipRequestInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Controllers.ZipRequestInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Controllers.ZipRequestInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Api2Pdf.Api.Controllers.ZipRequestInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Api2Pdf.Api.Controllers.ZipFileInfo": {
        "type": "object",
        "properties": {
          "Url": {
            "type": "string",
            "nullable": true
          },
          "FileName": {
            "type": "string",
            "default": "sample.pdf",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Api2Pdf.Api.Controllers.ZipRequestInput": {
        "type": "object",
        "properties": {
          "FileName": {
            "type": "string",
            "default": "sample.pdf",
            "nullable": true
          },
          "Inline": {
            "type": "boolean",
            "default": true
          },
          "InlinePdf": {
            "type": "boolean",
            "default": true
          },
          "Storage": {
            "$ref": "#/components/schemas/Api2Pdf.Api.Core.Models.FileStorageOptions"
          },
          "UseCustomStorage": {
            "type": "boolean",
            "default": false
          },
          "ExtraHTTPHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {
              "custom-header-key": "custom header value"
            },
            "nullable": true
          },
          "Files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Api2Pdf.Api.Controllers.ZipFileInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Api2Pdf.Api.Core.Models.FileStorageOptions": {
        "type": "object",
        "properties": {
          "Method": {
            "type": "string",
            "default": "PUT",
            "nullable": true
          },
          "Url": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "ExtraHTTPHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {
              "custom-header-key": "custom header value"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Api2Pdf.Api.Services.Chrome.Dtos.HtmlToImageRequestInputDto": {
        "type": "object",
        "properties": {
          "FileName": {
            "type": "string",
            "default": "sample.pdf",
            "nullable": true
          },
          "Inline": {
            "type": "boolean",
            "default": true
          },
          "InlinePdf": {
            "type": "boolean",
            "default": true
          },
          "Storage": {
            "$ref": "#/components/schemas/Api2Pdf.Api.Core.Models.FileStorageOptions"
          },
          "UseCustomStorage": {
            "type": "boolean",
            "default": false
          },
          "Html": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "Options": {
            "$ref": "#/components/schemas/Api2Pdf.Api.Services.Chrome.Dtos.HtmlToImageRequestOptionsInputDto"
          }
        },
        "additionalProperties": false
      },
      "Api2Pdf.Api.Services.Chrome.Dtos.HtmlToImageRequestOptionsInputDto": {
        "type": "object",
        "properties": {
          "Delay": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "FullPage": {
            "type": "boolean",
            "default": true
          },
          "ViewPortOptions": {
            "$ref": "#/components/schemas/PuppeteerSharp.ViewPortOptions"
          },
          "PuppeteerWaitForMethod": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "PuppeteerWaitForValue": {
            "type": "string",
            "default": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Api2Pdf.Api.Services.Chrome.Dtos.HtmlToPdfRequestInputDto": {
        "type": "object",
        "properties": {
          "FileName": {
            "type": "string",
            "default": "sample.pdf",
            "nullable": true
          },
          "Inline": {
            "type": "boolean",
            "default": true
          },
          "InlinePdf": {
            "type": "boolean",
            "default": true
          },
          "Storage": {
            "$ref": "#/components/schemas/Api2Pdf.Api.Core.Models.FileStorageOptions"
          },
          "UseCustomStorage": {
            "type": "boolean",
            "default": false
          },
          "Html": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "Options": {
            "$ref": "#/components/schemas/Api2Pdf.Api.Services.Chrome.Dtos.HtmlToPdfRequestOptionsInputDto"
          }
        },
        "additionalProperties": false
      },
      "Api2Pdf.Api.Services.Chrome.Dtos.HtmlToPdfRequestOptionsInputDto": {
        "type": "object",
        "properties": {
          "Delay": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "Scale": {
            "type": "number",
            "format": "double",
            "default": 1
          },
          "DisplayHeaderFooter": {
            "type": "boolean",
            "default": false
          },
          "HeaderTemplate": {
            "type": "string",
            "default": "<span></span>",
            "nullable": true
          },
          "FooterTemplate": {
            "type": "string",
            "default": "<span></span>",
            "nullable": true
          },
          "PrintBackground": {
            "type": "boolean",
            "default": true
          },
          "Landscape": {
            "type": "boolean",
            "default": false
          },
          "PageRanges": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "Width": {
            "type": "string",
            "default": "8.27in",
            "nullable": true
          },
          "Height": {
            "type": "string",
            "default": "11.69in",
            "nullable": true
          },
          "MarginTop": {
            "type": "string",
            "default": ".4in",
            "nullable": true
          },
          "MarginBottom": {
            "type": "string",
            "default": ".4in",
            "nullable": true
          },
          "MarginLeft": {
            "type": "string",
            "default": ".4in",
            "nullable": true
          },
          "MarginRight": {
            "type": "string",
            "default": ".4in",
            "nullable": true
          },
          "PreferCSSPageSize": {
            "type": "boolean",
            "default": false
          },
          "OmitBackground": {
            "type": "boolean",
            "default": false
          },
          "Tagged": {
            "type": "boolean",
            "default": true
          },
          "Outline": {
            "type": "boolean",
            "default": false
          },
          "UsePrintCss": {
            "type": "boolean",
            "default": true
          },
          "PuppeteerWaitForMethod": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "PuppeteerWaitForValue": {
            "type": "string",
            "default": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Api2Pdf.Api.Services.Chrome.Dtos.UrlToImageRequestInputDto": {
        "type": "object",
        "properties": {
          "FileName": {
            "type": "string",
            "default": "sample.pdf",
            "nullable": true
          },
          "Inline": {
            "type": "boolean",
            "default": true
          },
          "InlinePdf": {
            "type": "boolean",
            "default": true
          },
          "Storage": {
            "$ref": "#/components/schemas/Api2Pdf.Api.Core.Models.FileStorageOptions"
          },
          "UseCustomStorage": {
            "type": "boolean",
            "default": false
          },
          "ExtraHTTPHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {
              "custom-header-key": "custom header value"
            },
            "nullable": true
          },
          "Url": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "Options": {
            "$ref": "#/components/schemas/Api2Pdf.Api.Services.Chrome.Dtos.UrlToImageRequestOptionsInputDto"
          }
        },
        "additionalProperties": false
      },
      "Api2Pdf.Api.Services.Chrome.Dtos.UrlToImageRequestOptionsInputDto": {
        "type": "object",
        "properties": {
          "Delay": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "FullPage": {
            "type": "boolean",
            "default": true
          },
          "ViewPortOptions": {
            "$ref": "#/components/schemas/PuppeteerSharp.ViewPortOptions"
          },
          "PuppeteerWaitForMethod": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "PuppeteerWaitForValue": {
            "type": "string",
            "default": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Api2Pdf.Api.Services.Chrome.Dtos.UrlToPdfRequestInputDto": {
        "type": "object",
        "properties": {
          "FileName": {
            "type": "string",
            "default": "sample.pdf",
            "nullable": true
          },
          "Inline": {
            "type": "boolean",
            "default": true
          },
          "InlinePdf": {
            "type": "boolean",
            "default": true
          },
          "Storage": {
            "$ref": "#/components/schemas/Api2Pdf.Api.Core.Models.FileStorageOptions"
          },
          "UseCustomStorage": {
            "type": "boolean",
            "default": false
          },
          "ExtraHTTPHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {
              "custom-header-key": "custom header value"
            },
            "nullable": true
          },
          "Url": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "Options": {
            "$ref": "#/components/schemas/Api2Pdf.Api.Services.Chrome.Dtos.UrlToPdfRequestOptionsInputDto"
          }
        },
        "additionalProperties": false
      },
      "Api2Pdf.Api.Services.Chrome.Dtos.UrlToPdfRequestOptionsInputDto": {
        "type": "object",
        "properties": {
          "Delay": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "Scale": {
            "type": "number",
            "format": "double",
            "default": 1
          },
          "DisplayHeaderFooter": {
            "type": "boolean",
            "default": false
          },
          "HeaderTemplate": {
            "type": "string",
            "default": "<span></span>",
            "nullable": true
          },
          "FooterTemplate": {
            "type": "string",
            "default": "<span></span>",
            "nullable": true
          },
          "PrintBackground": {
            "type": "boolean",
            "default": true
          },
          "Landscape": {
            "type": "boolean",
            "default": false
          },
          "PageRanges": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "Width": {
            "type": "string",
            "default": "8.27in",
            "nullable": true
          },
          "Height": {
            "type": "string",
            "default": "11.69in",
            "nullable": true
          },
          "MarginTop": {
            "type": "string",
            "default": ".4in",
            "nullable": true
          },
          "MarginBottom": {
            "type": "string",
            "default": ".4in",
            "nullable": true
          },
          "MarginLeft": {
            "type": "string",
            "default": ".4in",
            "nullable": true
          },
          "MarginRight": {
            "type": "string",
            "default": ".4in",
            "nullable": true
          },
          "PreferCSSPageSize": {
            "type": "boolean",
            "default": false
          },
          "OmitBackground": {
            "type": "boolean",
            "default": false
          },
          "Tagged": {
            "type": "boolean",
            "default": true
          },
          "Outline": {
            "type": "boolean",
            "default": false
          },
          "UsePrintCss": {
            "type": "boolean",
            "default": true
          },
          "PuppeteerWaitForMethod": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "PuppeteerWaitForValue": {
            "type": "string",
            "default": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Api2Pdf.Api.Services.LibreOffice.Dtos.UrlRequestInputDto": {
        "type": "object",
        "properties": {
          "FileName": {
            "type": "string",
            "default": "sample.pdf",
            "nullable": true
          },
          "Inline": {
            "type": "boolean",
            "default": true
          },
          "InlinePdf": {
            "type": "boolean",
            "default": true
          },
          "Storage": {
            "$ref": "#/components/schemas/Api2Pdf.Api.Core.Models.FileStorageOptions"
          },
          "UseCustomStorage": {
            "type": "boolean",
            "default": false
          },
          "ExtraHTTPHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {
              "custom-header-key": "custom header value"
            },
            "nullable": true
          },
          "Url": {
            "type": "string",
            "default": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Api2Pdf.Api.Services.PdfSharp.Dtos.BookmarkDto": {
        "type": "object",
        "properties": {
          "Title": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "Page": {
            "type": "integer",
            "format": "int32",
            "default": 0
          }
        },
        "additionalProperties": false
      },
      "Api2Pdf.Api.Services.PdfSharp.Dtos.BookmarksRequestInputDto": {
        "type": "object",
        "properties": {
          "FileName": {
            "type": "string",
            "default": "sample.pdf",
            "nullable": true
          },
          "Inline": {
            "type": "boolean",
            "default": true
          },
          "InlinePdf": {
            "type": "boolean",
            "default": true
          },
          "Storage": {
            "$ref": "#/components/schemas/Api2Pdf.Api.Core.Models.FileStorageOptions"
          },
          "UseCustomStorage": {
            "type": "boolean",
            "default": false
          },
          "ExtraHTTPHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {
              "custom-header-key": "custom header value"
            },
            "nullable": true
          },
          "Url": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "Bookmarks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Api2Pdf.Api.Services.PdfSharp.Dtos.BookmarkDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Api2Pdf.Api.Services.PdfSharp.Dtos.CompressRequestInputDto": {
        "type": "object",
        "properties": {
          "FileName": {
            "type": "string",
            "default": "sample.pdf",
            "nullable": true
          },
          "Inline": {
            "type": "boolean",
            "default": true
          },
          "InlinePdf": {
            "type": "boolean",
            "default": true
          },
          "Storage": {
            "$ref": "#/components/schemas/Api2Pdf.Api.Core.Models.FileStorageOptions"
          },
          "UseCustomStorage": {
            "type": "boolean",
            "default": false
          },
          "ExtraHTTPHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {
              "custom-header-key": "custom header value"
            },
            "nullable": true
          },
          "Url": {
            "type": "string",
            "default": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Api2Pdf.Api.Services.PdfSharp.Dtos.ExtractPagesRequestInputDto": {
        "type": "object",
        "properties": {
          "FileName": {
            "type": "string",
            "default": "sample.pdf",
            "nullable": true
          },
          "Inline": {
            "type": "boolean",
            "default": true
          },
          "InlinePdf": {
            "type": "boolean",
            "default": true
          },
          "Storage": {
            "$ref": "#/components/schemas/Api2Pdf.Api.Core.Models.FileStorageOptions"
          },
          "UseCustomStorage": {
            "type": "boolean",
            "default": false
          },
          "ExtraHTTPHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {
              "custom-header-key": "custom header value"
            },
            "nullable": true
          },
          "Url": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "Start": {
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          "End": {
            "type": "integer",
            "format": "int32",
            "default": 0
          }
        },
        "additionalProperties": false
      },
      "Api2Pdf.Api.Services.PdfSharp.Dtos.MergePdfsRequestInputDto": {
        "type": "object",
        "properties": {
          "FileName": {
            "type": "string",
            "default": "sample.pdf",
            "nullable": true
          },
          "Inline": {
            "type": "boolean",
            "default": true
          },
          "InlinePdf": {
            "type": "boolean",
            "default": true
          },
          "Storage": {
            "$ref": "#/components/schemas/Api2Pdf.Api.Core.Models.FileStorageOptions"
          },
          "UseCustomStorage": {
            "type": "boolean",
            "default": false
          },
          "ExtraHTTPHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {
              "custom-header-key": "custom header value"
            },
            "nullable": true
          },
          "Urls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Api2Pdf.Api.Services.PdfSharp.Dtos.PasswordsRequestInputDto": {
        "type": "object",
        "properties": {
          "FileName": {
            "type": "string",
            "default": "sample.pdf",
            "nullable": true
          },
          "Inline": {
            "type": "boolean",
            "default": true
          },
          "InlinePdf": {
            "type": "boolean",
            "default": true
          },
          "Storage": {
            "$ref": "#/components/schemas/Api2Pdf.Api.Core.Models.FileStorageOptions"
          },
          "UseCustomStorage": {
            "type": "boolean",
            "default": false
          },
          "ExtraHTTPHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {
              "custom-header-key": "custom header value"
            },
            "nullable": true
          },
          "Url": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "UserPassword": {
            "type": "string",
            "default": "",
            "nullable": true
          },
          "OwnerPassword": {
            "type": "string",
            "default": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Api2Pdf.Api.Services.Wkhtml.Dtos.HtmlToPdfRequestInputDto": {
        "type": "object",
        "properties": {
          "FileName": {
            "type": "string",
            "default": "sample.pdf",
            "nullable": true
          },
          "Inline": {
            "type": "boolean",
            "default": true
          },
          "InlinePdf": {
            "type": "boolean",
            "default": true
          },
          "Storage": {
            "$ref": "#/components/schemas/Api2Pdf.Api.Core.Models.FileStorageOptions"
          },
          "UseCustomStorage": {
            "type": "boolean",
            "default": false
          },
          "Options": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true
          },
          "EnableToc": {
            "type": "boolean",
            "default": false
          },
          "TocOptions": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true
          },
          "Html": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Api2Pdf.Api.Services.Wkhtml.Dtos.UrlToPdfRequestInputDto": {
        "type": "object",
        "properties": {
          "FileName": {
            "type": "string",
            "default": "sample.pdf",
            "nullable": true
          },
          "Inline": {
            "type": "boolean",
            "default": true
          },
          "InlinePdf": {
            "type": "boolean",
            "default": true
          },
          "Storage": {
            "$ref": "#/components/schemas/Api2Pdf.Api.Core.Models.FileStorageOptions"
          },
          "UseCustomStorage": {
            "type": "boolean",
            "default": false
          },
          "Options": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true
          },
          "EnableToc": {
            "type": "boolean",
            "default": false
          },
          "TocOptions": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true
          },
          "Url": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PuppeteerSharp.ViewPortOptions": {
        "type": "object",
        "properties": {
          "Width": {
            "type": "integer",
            "format": "int32",
            "default": 1920
          },
          "Height": {
            "type": "integer",
            "format": "int32",
            "default": 1080
          },
          "IsMobile": {
            "type": "boolean",
            "default": false
          },
          "DeviceScaleFactor": {
            "type": "number",
            "format": "double",
            "default": 1
          },
          "IsLandscape": {
            "type": "boolean",
            "default": false
          },
          "HasTouch": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "ApiKeyInHeader": {
        "type": "apiKey",
        "description": "API Key needed to access the endpoints. Example: \"Authorization: abc123\"",
        "name": "Authorization",
        "in": "header"
      },
      "ApiKeyInQuery": {
        "type": "apiKey",
        "description": "API Key needed to access the endpoints. Example: \"?apiKey=abc123\"",
        "name": "apiKey",
        "in": "query"
      }
    }
  },
  "security": [
    {
      "ApiKeyInHeader": [ ],
      "ApiKeyInQuery": [ ]
    }
  ]
}