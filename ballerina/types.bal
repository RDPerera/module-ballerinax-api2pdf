// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

public type Api2Pdf\.Api\.Services\.LibreOffice\.Dtos\.UrlRequestInputDto record {|
    string? FileName = "sample.pdf";
    boolean Inline = true;
    boolean InlinePdf = true;
    Api2Pdf\.Api\.Core\.Models\.FileStorageOptions Storage?;
    boolean UseCustomStorage = false;
    record {|string...;|}? ExtraHTTPHeaders = {"custom-header-key":"custom header value"};
    string? Url = "";
|};

# Represents the Queries record for the operation: ChromePostHtmlToPdf
public type ChromePostHtmlToPdfQueries record {
    boolean outputBinary = false;
};

# Represents the Queries record for the operation: LibrePostHtmlToXlsx
public type LibrePostHtmlToXlsxQueries record {
    boolean outputBinary = false;
};

public type Api2Pdf\.Api\.Core\.Models\.FileStorageOptions record {|
    string? Method = "PUT";
    string? Url = "";
    record {|string...;|}? ExtraHTTPHeaders = {"custom-header-key":"custom header value"};
|};

public type Api2Pdf\.Api\.Services\.Chrome\.Dtos\.HtmlToImageRequestInputDto record {|
    string? FileName = "sample.pdf";
    boolean Inline = true;
    boolean InlinePdf = true;
    Api2Pdf\.Api\.Core\.Models\.FileStorageOptions Storage?;
    boolean UseCustomStorage = false;
    string? Html = "";
    Api2Pdf\.Api\.Services\.Chrome\.Dtos\.HtmlToImageRequestOptionsInputDto Options?;
|};

public type Api2Pdf\.Api\.Services\.PdfSharp\.Dtos\.BookmarkDto record {|
    string? Title = "";
    int:Signed32 Page = 0;
|};

# Represents the Queries record for the operation: PdfSharpPostBookmarks
public type PdfSharpPostBookmarksQueries record {
    boolean outputBinary = false;
};

# Represents the Queries record for the operation: PdfSharpPostPassword
public type PdfSharpPostPasswordQueries record {
    boolean outputBinary = false;
};

# Represents the Queries record for the operation: LibrePostHtmlToDocx
public type LibrePostHtmlToDocxQueries record {
    boolean outputBinary = false;
};

public type Api2Pdf\.Api\.Services\.Chrome\.Dtos\.UrlToImageRequestOptionsInputDto record {|
    int:Signed32 Delay = 0;
    boolean FullPage = true;
    PuppeteerSharp\.ViewPortOptions ViewPortOptions?;
    string? PuppeteerWaitForMethod = "";
    string? PuppeteerWaitForValue = "";
|};

# Represents the Queries record for the operation: ChromePostUrlToImage
public type ChromePostUrlToImageQueries record {
    boolean outputBinary = false;
};

# Represents the Queries record for the operation: ChromeGetUrlToImage
public type ChromeGetUrlToImageQueries record {
    boolean outputBinary = false;
    string url?;
};

public type Api2Pdf\.Api\.Services\.PdfSharp\.Dtos\.PasswordsRequestInputDto record {|
    string? FileName = "sample.pdf";
    boolean Inline = true;
    boolean InlinePdf = true;
    Api2Pdf\.Api\.Core\.Models\.FileStorageOptions Storage?;
    boolean UseCustomStorage = false;
    record {|string...;|}? ExtraHTTPHeaders = {"custom-header-key":"custom header value"};
    string? Url = "";
    string? UserPassword = "";
    string? OwnerPassword = "";
|};

public type Api2Pdf\.Api\.Services\.Chrome\.Dtos\.HtmlToImageRequestOptionsInputDto record {|
    int:Signed32 Delay = 0;
    boolean FullPage = true;
    PuppeteerSharp\.ViewPortOptions ViewPortOptions?;
    string? PuppeteerWaitForMethod = "";
    string? PuppeteerWaitForValue = "";
|};

public type Api2Pdf\.Api\.Services\.PdfSharp\.Dtos\.ExtractPagesRequestInputDto record {|
    string? FileName = "sample.pdf";
    boolean Inline = true;
    boolean InlinePdf = true;
    Api2Pdf\.Api\.Core\.Models\.FileStorageOptions Storage?;
    boolean UseCustomStorage = false;
    record {|string...;|}? ExtraHTTPHeaders = {"custom-header-key":"custom header value"};
    string? Url = "";
    int:Signed32 Start = 0;
    int:Signed32 End = 0;
|};

# Represents the Queries record for the operation: PdfSharpPostMergePdfs
public type PdfSharpPostMergePdfsQueries record {
    boolean outputBinary = false;
};

# Represents the Queries record for the operation: LibrePostPdfToHtml
public type LibrePostPdfToHtmlQueries record {
    boolean outputBinary = false;
};

public type Api2Pdf\.Api\.Controllers\.ZipFileInfo record {|
    string? Url?;
    string? FileName = "sample.pdf";
|};

public type Api2Pdf\.Api\.Services\.Chrome\.Dtos\.HtmlToPdfRequestOptionsInputDto record {|
    int:Signed32 Delay = 0;
    decimal Scale = 1;
    boolean DisplayHeaderFooter = false;
    string? HeaderTemplate = "<span></span>";
    string? FooterTemplate = "<span></span>";
    boolean PrintBackground = true;
    boolean Landscape = false;
    string? PageRanges = "";
    string? Width = "8.27in";
    string? Height = "11.69in";
    string? MarginTop = ".4in";
    string? MarginBottom = ".4in";
    string? MarginLeft = ".4in";
    string? MarginRight = ".4in";
    boolean PreferCSSPageSize = false;
    boolean OmitBackground = false;
    boolean Tagged = true;
    boolean Outline = false;
    boolean UsePrintCss = true;
    string? PuppeteerWaitForMethod = "";
    string? PuppeteerWaitForValue = "";
|};

public type Api2Pdf\.Api\.Services\.Wkhtml\.Dtos\.HtmlToPdfRequestInputDto record {|
    string? FileName = "sample.pdf";
    boolean Inline = true;
    boolean InlinePdf = true;
    Api2Pdf\.Api\.Core\.Models\.FileStorageOptions Storage?;
    boolean UseCustomStorage = false;
    record {}? Options?;
    boolean EnableToc = false;
    record {}? TocOptions?;
    string? Html?;
|};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

public type Api2Pdf\.Api\.Services\.PdfSharp\.Dtos\.BookmarksRequestInputDto record {|
    string? FileName = "sample.pdf";
    boolean Inline = true;
    boolean InlinePdf = true;
    Api2Pdf\.Api\.Core\.Models\.FileStorageOptions Storage?;
    boolean UseCustomStorage = false;
    record {|string...;|}? ExtraHTTPHeaders = {"custom-header-key":"custom header value"};
    string? Url = "";
    Api2Pdf\.Api\.Services\.PdfSharp\.Dtos\.BookmarkDto[]? Bookmarks?;
|};

public type Api2Pdf\.Api\.Services\.Chrome\.Dtos\.UrlToPdfRequestOptionsInputDto record {|
    int:Signed32 Delay = 0;
    decimal Scale = 1;
    boolean DisplayHeaderFooter = false;
    string? HeaderTemplate = "<span></span>";
    string? FooterTemplate = "<span></span>";
    boolean PrintBackground = true;
    boolean Landscape = false;
    string? PageRanges = "";
    string? Width = "8.27in";
    string? Height = "11.69in";
    string? MarginTop = ".4in";
    string? MarginBottom = ".4in";
    string? MarginLeft = ".4in";
    string? MarginRight = ".4in";
    boolean PreferCSSPageSize = false;
    boolean OmitBackground = false;
    boolean Tagged = true;
    boolean Outline = false;
    boolean UsePrintCss = true;
    string? PuppeteerWaitForMethod = "";
    string? PuppeteerWaitForValue = "";
|};

public type Api2Pdf\.Api\.Services\.PdfSharp\.Dtos\.MergePdfsRequestInputDto record {|
    string? FileName = "sample.pdf";
    boolean Inline = true;
    boolean InlinePdf = true;
    Api2Pdf\.Api\.Core\.Models\.FileStorageOptions Storage?;
    boolean UseCustomStorage = false;
    record {|string...;|}? ExtraHTTPHeaders = {"custom-header-key":"custom header value"};
    string[]? Urls?;
|};

# Represents the Queries record for the operation: WkhtmlPostHtmlToPdf
public type WkhtmlPostHtmlToPdfQueries record {
    boolean outputBinary = false;
};

# Represents the Queries record for the operation: ZipPostGenerateZip
public type ZipPostGenerateZipQueries record {
    boolean outputBinary = true;
};

# Represents the Queries record for the operation: ChromeGetUrlToPdf
public type ChromeGetUrlToPdfQueries record {
    boolean outputBinary = true;
    string url?;
};

public type Api2Pdf\.Api\.Services\.PdfSharp\.Dtos\.CompressRequestInputDto record {|
    string? FileName = "sample.pdf";
    boolean Inline = true;
    boolean InlinePdf = true;
    Api2Pdf\.Api\.Core\.Models\.FileStorageOptions Storage?;
    boolean UseCustomStorage = false;
    record {|string...;|}? ExtraHTTPHeaders = {"custom-header-key":"custom header value"};
    string? Url = "";
|};

public type PuppeteerSharp\.ViewPortOptions record {|
    int:Signed32 Width = 1920;
    int:Signed32 Height = 1080;
    boolean IsMobile = false;
    decimal DeviceScaleFactor = 1;
    boolean IsLandscape = false;
    boolean HasTouch = false;
|};

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

# Represents the Queries record for the operation: ZebraGetBarcode
public type ZebraGetBarcodeQueries record {
    string format?;
    int:Signed32 width = 0;
    boolean outputBinary = true;
    boolean showlabel = false;
    string value?;
    int:Signed32 height = 0;
};

public type Api2Pdf\.Api\.Services\.Chrome\.Dtos\.UrlToPdfRequestInputDto record {|
    string? FileName = "sample.pdf";
    boolean Inline = true;
    boolean InlinePdf = true;
    Api2Pdf\.Api\.Core\.Models\.FileStorageOptions Storage?;
    boolean UseCustomStorage = false;
    record {|string...;|}? ExtraHTTPHeaders = {"custom-header-key":"custom header value"};
    string? Url = "";
    Api2Pdf\.Api\.Services\.Chrome\.Dtos\.UrlToPdfRequestOptionsInputDto Options?;
|};

# Represents the Queries record for the operation: LibrePostAnyToPdf
public type LibrePostAnyToPdfQueries record {
    boolean outputBinary = false;
};

# Represents the Queries record for the operation: WkthmlGetUrlToPdf
public type WkthmlGetUrlToPdfQueries record {
    boolean outputBinary = true;
    string url?;
};

# Represents the Queries record for the operation: ChromePostHtmlToImage
public type ChromePostHtmlToImageQueries record {
    boolean outputBinary = false;
};

# Represents the Queries record for the operation: LibrePostThumbnail
public type LibrePostThumbnailQueries record {
    boolean outputBinary = false;
};

public type Api2Pdf\.Api\.Services\.Chrome\.Dtos\.UrlToImageRequestInputDto record {|
    string? FileName = "sample.pdf";
    boolean Inline = true;
    boolean InlinePdf = true;
    Api2Pdf\.Api\.Core\.Models\.FileStorageOptions Storage?;
    boolean UseCustomStorage = false;
    record {|string...;|}? ExtraHTTPHeaders = {"custom-header-key":"custom header value"};
    string? Url = "";
    Api2Pdf\.Api\.Services\.Chrome\.Dtos\.UrlToImageRequestOptionsInputDto Options?;
|};

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

public type Api2Pdf\.Api\.Services\.Chrome\.Dtos\.HtmlToPdfRequestInputDto record {|
    string? FileName = "sample.pdf";
    boolean Inline = true;
    boolean InlinePdf = true;
    Api2Pdf\.Api\.Core\.Models\.FileStorageOptions Storage?;
    boolean UseCustomStorage = false;
    string? Html = "";
    Api2Pdf\.Api\.Services\.Chrome\.Dtos\.HtmlToPdfRequestOptionsInputDto Options?;
|};

public type Api2Pdf\.Api\.Controllers\.ZipRequestInput record {|
    string? FileName = "sample.pdf";
    boolean Inline = true;
    boolean InlinePdf = true;
    Api2Pdf\.Api\.Core\.Models\.FileStorageOptions Storage?;
    boolean UseCustomStorage = false;
    record {|string...;|}? ExtraHTTPHeaders = {"custom-header-key":"custom header value"};
    Api2Pdf\.Api\.Controllers\.ZipFileInfo[]? Files?;
|};

# Represents the Queries record for the operation: ChromePostUrlToPdf
public type ChromePostUrlToPdfQueries record {
    boolean outputBinary = false;
};

# Represents the Queries record for the operation: PdfSharpPostExtractPages
public type PdfSharpPostExtractPagesQueries record {
    boolean outputBinary = false;
};

# Represents the Queries record for the operation: PdfSharpPostCompress
public type PdfSharpPostCompressQueries record {
    boolean outputBinary = false;
};

# Provides API key configurations needed when communicating with a remote HTTP endpoint.
public type ApiKeysConfig record {|
    # API Key needed to access the endpoints. Example: "Authorization: abc123"
    @display {label: "", kind: "password"}
    string Authorization;
    # API Key needed to access the endpoints. Example: "?apiKey=abc123"
    @display {label: "", kind: "password"}
    string apiKey;
|};

# Represents the Queries record for the operation: WkhtmlPostUrlToPdf
public type WkhtmlPostUrlToPdfQueries record {
    boolean outputBinary = false;
};

public type Api2Pdf\.Api\.Services\.Wkhtml\.Dtos\.UrlToPdfRequestInputDto record {|
    string? FileName = "sample.pdf";
    boolean Inline = true;
    boolean InlinePdf = true;
    Api2Pdf\.Api\.Core\.Models\.FileStorageOptions Storage?;
    boolean UseCustomStorage = false;
    record {}? Options?;
    boolean EnableToc = false;
    record {}? TocOptions?;
    string? Url?;
|};
